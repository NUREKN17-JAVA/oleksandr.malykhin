package UM.malykhin.nure.gui;

import java.awt.Component;
import java.awt.Window;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;

import com.mockobjects.dynamic.Mock;

import UM.malykhin.nure.User;
import UM.malykhin.nure.db.DaoFactory;
import UM.malykhin.nure.db.DaoFactoryImpl;
import UM.malykhin.nure.db.MockDaoFactory;
import UM.malykhin.nure.db.MockUserDao;
import junit.extensions.jfcunit.JFCTestCase;
import junit.extensions.jfcunit.JFCTestHelper;
import junit.extensions.jfcunit.eventdata.MouseEventData;
import junit.extensions.jfcunit.eventdata.StringEventData;
import junit.extensions.jfcunit.finder.NamedComponentFinder;

public class MainFrameTest extends JFCTestCase {

	private Window mainFrame;
	
	private Mock mockUserDao;;
	
	
	private static final String MOCK_FIND_ALL_COMMAND = "findAll";
    private static final String MOCK_DELETE_COMMAND = "delete";
    private static final String MOCK_UPDATE_COMMAND = "update";
    private static final String MOCK_CREATE_COMMAND = "create";

    private static final String USER_TABLE_MODEL_LAST_NAME = "UserTableModel.last_name";
    private static final String USER_TABLE_MODEL_FIRST_NAME = "UserTableModel.first_name";
    private static final String USER_TABLE_MODEL_ID = "UserTableModel.id";

    private static final String DATE_OF_BIRTH_FIELD_COMPONENT_NAME = "dateOfBirthField";
    private static final String LAST_NAME_FIELD_COMPONENT_NAME = "lastNameField";
    private static final String FIRST_NAME_FIELD_COMPONENT_NAME = "firstNameField";

    private static final String LAST_NAME = "Doe";
    private static final String FIRST_NAME = "John";
    private static final Date DATE_OF_BIRTH = new Date();

    private static final String EXPECTED_USER_LAST_NAME = "Gates";
    private static final String EXPECTED_USER_FIRST_NAME = "Bill";
    private static final Long EXPECTED_USER_ID = new Long(1000);

    private static final String BROWSE_PANEL_COMPONENT_NAME = "browsePanel";
    private static final String USER_TABLE_COMPONENT_NAME = "userTable";
    private static final String ADD_PANEL_COMPONENT_NAME = "addPanel";
    private static final String EDIT_PANEL_COMPONENT_NAME = "editPanel";

    private static final String OK_BUTTON_COMPONENT_NAME = "okButton";
    private static final String DELETE_BUTTON_COMPONENT_NAME = "deleteButton";
    private static final String DETAILS_BUTTON_COMPONENT_NAME = "detailsButton";
    private static final String CANCEL_BUTTON_COMPONENT_NAME = "cancelButton";
    private static final String EDIT_BUTTON_COMPONENT_NAME = "editButton";
    private static final String ADD_BUTTON_COMPONENT_NAME = "addButton";
    private static final int NUMBER_OF_COLUMNS_IN_USER_TABLE = 3;
    private static final int NUMBER_OF_ROWS_ADD_TEST = 2;
    private static final int NUMBER_OF_ROWS_ADD_CANCEL_TEST = 1;
	
	protected void setUp() throws Exception {
		super.setUp();
		
		try {
		
		Properties properties = new Properties();
		
		properties.setProperty("dao.factory", MockDaoFactory.class
				.getName());
		
		DaoFactory.getInstance().init(properties);
		mockUserDao =((MockDaoFactory) DaoFactory.getInstance()).getMockUserDao();
		
		mockUserDao.expectAndReturn("findAll", new ArrayList());
		setHelper(new JFCTestHelper());
		mainFrame = new MainFrame();
		
		}catch (Exception e){
		 e.printStackTrace();
	  }
		mainFrame.setVisible(true);
	}

	protected void tearDown() throws Exception {
		
try {
					mockUserDao.verify();
		mainFrame.setVisible(false);
		getHelper().cleanUp(this);
		super.tearDown();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private Component find(Class componentClass, String name)
	{
		NamedComponentFinder finder;
		finder = new NamedComponentFinder(componentClass,name);
		finder.setWait(0);
		Component component = finder.find(mainFrame, 0);
		assertNotNull("Could not find component '" + name +"'", component);
		return component;
	}
	
	public void testBrowseControls() {
		find(JPanel.class, "browsePanel");
		JTable table = (JTable) find(JTable.class, "userTable");
		assertEquals(3, table.getColumnCount());
		assertEquals("ID", table.getColumnName(0));
		assertEquals("Имя", table.getColumnName(1));
		assertEquals("Фамилия", table.getColumnName(2)); 
		
		find(JButton.class, "addButton");
		find(JButton.class, "editButton");
		find(JButton.class, "deleteButton");
		find(JButton.class, "detailsButton");
	}
	
	/*
	 * public void testAddUser() { String firstName = "Sasha"; String lastName =
	 * "Malykhin"; Date now = new Date();
	 * 
	 * User user = new User(firstName, lastName, now);
	 * 
	 * User expectedUser = new User(new Long(1), firstName, lastName, now);
	 * mockUserDao.expectAndReturn("create",user,expectedUser);
	 * 
	 * ArrayList users = new ArrayList(); users.add(expectedUser);
	 * mockUserDao.expectAndReturn("findAll", users);
	 * 
	 * JTable userTable = (JTable) find(JTable.class, "userTable"); assertEquals(0,
	 * userTable.getRowCount());
	 * 
	 * JButton addButton = (JButton) find(JButton.class, "addButton");
	 * getHelper().enterClickAndLeave(new MouseEventData(this, addButton));
	 * 
	 * find(JPanel.class, "addPanel");
	 * 
	 * JTextField firstNameField = (JTextField) find(JTextField.class,
	 * "firstNameField"); JTextField lastNameField =
	 * (JTextField)find(JTextField.class, "lastNameField"); JTextField
	 * dateOfBirthField = (JTextField)find(JTextField.class, "dateOfBirthField");
	 * JButton okButton = (JButton) find(JButton.class, "okButton");
	 * find(JButton.class, "cancelButton");
	 * 
	 * getHelper().sendString(new StringEventData(this, firstNameField, firstName));
	 * getHelper().sendString(new StringEventData(this, lastNameField, lastName));
	 * DateFormat formatter = DateFormat.getDateInstance();
	 * 
	 * String date = formatter.format(now); getHelper().sendString(new
	 * StringEventData(this, dateOfBirthField, date));
	 * 
	 * getHelper().enterClickAndLeave(new MouseEventData(this, okButton));
	 * 
	 * find(JPanel.class, "browsePanel"); userTable = (JTable) find(JTable.class,
	 * "userTable"); assertEquals(1, userTable.getRowCount()); }
	 */
	
	public void testCancelAddUser() {

        User user = new User(FIRST_NAME,LAST_NAME,DATE_OF_BIRTH);
        User expectedUser = new User(new Long(1),FIRST_NAME,LAST_NAME,DATE_OF_BIRTH);
        mockUserDao.expectAndReturn(MOCK_CREATE_COMMAND, user, expectedUser);
        ArrayList<User> users = new ArrayList<User>(this.users);
        users.add(expectedUser);
        mockUserDao.expectAndReturn(MOCK_FIND_ALL_COMMAND,users);
        JTable table = (JTable) find(JTable.class, USER_TABLE_COMPONENT_NAME);
        assertEquals(0,table.getRowCount());

        JButton addButton = (JButton) find(JButton.class, ADD_BUTTON_COMPONENT_NAME);
        getHelper().enterClickAndLeave(new MouseEventData(this,addButton));
        find(JPanel.class, ADD_PANEL_COMPONENT_NAME);
        fillFields(FIRST_NAME, LAST_NAME, DATE_OF_BIRTH);

        JButton cancelButton = (JButton) find(JButton.class,CANCEL_BUTTON_COMPONENT_NAME);

        getHelper().enterClickAndLeave(new MouseEventData(this,cancelButton));
        find(JPanel.class,BROWSE_PANEL_COMPONENT_NAME);
        table = (JTable) find(JTable.class,USER_TABLE_COMPONENT_NAME);
        assertEquals(NUMBER_OF_ROWS_ADD_CANCEL_TEST,table.getRowCount());

    }
}
